parallel_csv_parser(std::vector<flex_type_enum> column_types, 
                      csv_line_tokenizer tokenizer,
                      bool continue_on_failure,
                      bool store_errors,
                      size_t row_limit,
                      std::vector<size_t> column_output_order = std::vector<size_t>(),
                      size_t num_threads = thread_pool::get_instance().size()):
      nthreads(std::max<size_t>(num_threads, 2) - 1), 
      parsed_buffer(nthreads), parsed_buffer_last_elem(nthreads), 
      writing_buffer(nthreads), writing_buffer_last_elem(nthreads), 
      error_buffer(nthreads), writing_error_buffer(nthreads),
      thread_local_tokenizer(nthreads, tokenizer), 
    read_group(thread_pool::get_instance()), 
    write_group(thread_pool::get_instance()), column_types(column_types),
    column_output_order(column_output_order),
    row_limit(row_limit), 
    continue_on_failure(continue_on_failure), 
    store_errors(store_errors),
    line_terminator(tokenizer.line_terminator),
    is_regular_line_terminator(line_terminator == "\n") {
    }